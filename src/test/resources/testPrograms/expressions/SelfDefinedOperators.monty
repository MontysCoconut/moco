// Testing: User defined operators.
//
// The user must be able to define operators on some class.
//
// Expected output: operator_unary-operator+operator-operator*operator/
//                  operator%operator<operator>operator<=operator>=operator=
//                  operator!=operator_notoperator_xoroperator_andoperator_or

class SomeClass:
    + SomeClass _neg_():
        println("_neg_")
        return self

    + SomeClass _add_(SomeClass other):
        println("_add_")
        return self

    + SomeClass _sub_(SomeClass other):
        println("_sub_")
        return self

    + SomeClass _mul_(SomeClass other):
        println("_mul_")
        return self

    + SomeClass _div_(SomeClass other):
        println("_div_")
        return self

    + SomeClass _mod_(SomeClass other):
        println("_mod_")
        return self

    + SomeClass _lt_(SomeClass other):
        println("_lt_")
        return self

    + SomeClass _gt_(SomeClass other):
        println("_gt_")
        return self

    + SomeClass _leq_(SomeClass other):
        println("_leq_")
        return self

    + SomeClass _geq_(SomeClass other):
        println("_geq_")
        return self

    + SomeClass _eq_(SomeClass other):
        println("_eq_")
        return self

    + SomeClass _neq_(SomeClass other):
        println("_neq_")
        return self

    + SomeClass _not_():
        println("_not_")
        return self

    + SomeClass _and_(SomeClass other):
        println("_and_")
        return self

    + SomeClass _or_(SomeClass other):
        println("_or_")
        return self

SomeClass foo := SomeClass()
SomeClass bar := SomeClass()
SomeClass result := SomeClass()

result := -bar
result := foo + bar
result := foo - bar
result := foo * bar
result := foo / bar
result := foo % bar
result := foo < bar
result := foo > bar
result := foo <= bar
result := foo >= bar
result := foo = bar
result := foo != bar
result := not bar
result := foo and bar
result := foo or bar
